{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Routes\\\\App\\\\App.tsx\";\nimport React from 'react';\nimport './App.css';\nimport { TaskHolder } from '../../Components/TaskHolder/TaskHolder';\nimport { theme, ThemeContext } from '../../contexts/ThemeContext';\nimport { useState, useCallback } from 'react';\nexport default function App() {\n  const [appTheme, setAppTheme] = useState(theme.usual);\n  const toggleThemeHandler = useCallback(() => {\n    setAppTheme(appTheme === theme.usual ? theme.dark : theme.usual);\n  }, [appTheme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: appTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `${appTheme}ThemeBtn ThemeBtn`,\n    onClick: toggleThemeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, appTheme === theme.usual ? 'Темная тема' : 'Светлая тема'), /*#__PURE__*/React.createElement(TaskHolder, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Routes/App/App.tsx"],"names":["React","TaskHolder","theme","ThemeContext","useState","useCallback","App","appTheme","setAppTheme","usual","toggleThemeHandler","dark"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,UAAT,QAA2B,wCAA3B;AACA,SAAQC,KAAR,EAAcC,YAAd,QAAiC,6BAAjC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,eAAe,SAASC,GAAT,GAAe;AAC1B,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAyBJ,QAAQ,CAACF,KAAK,CAACO,KAAP,CAAvC;AAEA,QAAMC,kBAAkB,GAAGL,WAAW,CAAC,MAAI;AACzCG,IAAAA,WAAW,CAACD,QAAQ,KAAKL,KAAK,CAACO,KAAnB,GAA2BP,KAAK,CAACS,IAAjC,GAAuCT,KAAK,CAACO,KAA9C,CAAX;AAAiE,GAD7B,EAEpC,CAACF,QAAD,CAFoC,CAAtC;AAID,sBACC,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAIA,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,SAAS,EAAG,GAAEA,QAAS,mBAA/B;AACE,IAAA,OAAO,EAAEG,kBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKH,QAAQ,KAAKL,KAAK,CAACO,KAAnB,GAA2B,aAA3B,GAA0C,cAF/C,CADJ,eAII,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADF,CADD;AASF","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { TaskHolder } from '../../Components/TaskHolder/TaskHolder';\r\nimport {theme,ThemeContext} from '../../contexts/ThemeContext'\r\nimport { useState, useCallback } from 'react';\r\n\r\nexport default function App() {\r\n    const [appTheme,setAppTheme] = useState(theme.usual);\r\n    \r\n    const toggleThemeHandler = useCallback(()=>{\r\n      setAppTheme(appTheme === theme.usual ? theme.dark: theme.usual);},\r\n      [appTheme]);\r\n\r\n   return (\r\n    <ThemeContext.Provider value = {appTheme}> \r\n      <div className=\"App\">\r\n          <button className={`${appTheme}ThemeBtn ThemeBtn`} \r\n            onClick={toggleThemeHandler}>\r\n              {appTheme === theme.usual ? 'Темная тема': 'Светлая тема'}</button>\r\n          <TaskHolder />\r\n      </div>\r\n    </ThemeContext.Provider>)\r\n}"]},"metadata":{},"sourceType":"module"}