{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Components\\\\TaskHolder\\\\TaskHolder.jsx\";\nimport React from \"react\";\nimport { useState, useContext, useCallback } from 'react';\nimport './TaskHolder.css';\nimport { TaskController } from './TaskController/TaskController';\nimport { Task } from '../Task/Task';\nimport { addLodaing } from '../../HOCs/LoaderHOC';\nimport { ThemeContext } from '../../contexts/ThemeContext';\nimport { Selector } from '../Selector/Selector';\nimport { TaskFilterOptions, TaskFilter } from '../../Constants/Constants.js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTask, removeTask, changeDoneState } from '../../redux/tasker';\nconst TaskWithLoading = addLodaing(Task);\nexport function TaskHolder() {\n  const theme = useContext(ThemeContext);\n  const {\n    tasks\n  } = useSelector(state => state.tasks);\n  const dispatch = useDispatch();\n  const [taskFilterName, setTaskFilter] = useState(TaskFilter.All.name);\n  const changeDoneTaskHandler = useCallback(taskId => dispatch(changeDoneState(taskId)), []);\n\n  const changeFilterHandler = e => {\n    setTaskFilter(e.target.value);\n  };\n\n  const removeTaskHandler = useCallback(taskId => dispatch(removeTask(taskId)), []);\n  const addTaskHandler = useCallback(task => dispatch(addTask(task)));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `TaskHolder ${theme}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MainInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, \"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u044F\\u043C\\u0438\"), /*#__PURE__*/React.createElement(TaskController, {\n    addTaskParentHandler: addTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Selector, {\n    title: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C\",\n    options: TaskFilterOptions,\n    changeValueParentHandler: changeFilterHandler,\n    parentValue: taskFilterName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, [...tasks].filter(TaskFilter[taskFilterName].func).map(task => /*#__PURE__*/React.createElement(\"li\", {\n    key: task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 32\n    }\n  }, /*#__PURE__*/React.createElement(TaskWithLoading, Object.assign({}, task, {\n    removeTaskParentHandler: removeTaskHandler,\n    changeDoneTaskParentHandler: changeDoneTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 37\n    }\n  }))))));\n}","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Components/TaskHolder/TaskHolder.jsx"],"names":["React","useState","useContext","useCallback","TaskController","Task","addLodaing","ThemeContext","Selector","TaskFilterOptions","TaskFilter","useDispatch","useSelector","addTask","removeTask","changeDoneState","TaskWithLoading","TaskHolder","theme","tasks","state","dispatch","taskFilterName","setTaskFilter","All","name","changeDoneTaskHandler","taskId","changeFilterHandler","e","target","value","removeTaskHandler","addTaskHandler","task","filter","func","map","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAiBC,UAAjB,EAA6BC,WAA7B,QAA+C,OAA/C;AACA,OAAO,kBAAP;AACA,SAAQC,cAAR,QAA6B,iCAA7B;AACA,SAAQC,IAAR,QAAmB,cAAnB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,8BAA9C;AACA,SAASC,WAAT,EAAqBC,WAArB,QAAwC,aAAxC;AACA,SAAQC,OAAR,EAAgBC,UAAhB,EAA2BC,eAA3B,QAAiD,oBAAjD;AAEA,MAAMC,eAAe,GAAGV,UAAU,CAACD,IAAD,CAAlC;AAEA,OAAO,SAASY,UAAT,GAAqB;AAExB,QAAMC,KAAK,GAAGhB,UAAU,CAACK,YAAD,CAAxB;AAEA,QAAM;AAACY,IAAAA;AAAD,MAAUP,WAAW,CAAEQ,KAAD,IAASA,KAAK,CAACD,KAAhB,CAA3B;AACA,QAAME,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM,CAACW,cAAD,EAAiBC,aAAjB,IAAkCtB,QAAQ,CAACS,UAAU,CAACc,GAAX,CAAeC,IAAhB,CAAhD;AACA,QAAMC,qBAAqB,GAAGvB,WAAW,CAACwB,MAAM,IAAEN,QAAQ,CAACN,eAAe,CAACY,MAAD,CAAhB,CAAjB,EAA2C,EAA3C,CAAzC;;AAEA,QAAMC,mBAAmB,GAAIC,CAAD,IAAM;AAC9BN,IAAAA,aAAa,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACH,GAFD;;AAIA,QAAMC,iBAAiB,GAAG7B,WAAW,CAACwB,MAAM,IAAGN,QAAQ,CAACP,UAAU,CAACa,MAAD,CAAX,CAAlB,EAAuC,EAAvC,CAArC;AAEA,QAAMM,cAAc,GAAG9B,WAAW,CAAE+B,IAAD,IAAQb,QAAQ,CAACR,OAAO,CAACqB,IAAD,CAAR,CAAjB,CAAlC;AAEA,sBAAQ;AAAK,IAAA,SAAS,EAAG,cAAahB,KAAM,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2HADJ,eAEQ,oBAAC,cAAD;AAAgB,IAAA,oBAAoB,EAAIe,cAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,eAGQ,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,kDAAhB;AACgB,IAAA,OAAO,EAAExB,iBADzB;AAEgB,IAAA,wBAAwB,EAAImB,mBAF5C;AAGgB,IAAA,WAAW,EAAGN,cAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,CADJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC,GAAGH,KAAJ,EAAWgB,MAAX,CAAkBzB,UAAU,CAACY,cAAD,CAAV,CAA2Bc,IAA7C,EACAC,GADA,CACIH,IAAI,iBAAE;AAAI,IAAA,GAAG,EAAIA,IAAI,CAACI,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACK,oBAAC,eAAD,oBAAqBJ,IAArB;AACA,IAAA,uBAAuB,EAAIF,iBAD3B;AAEA,IAAA,2BAA2B,EAAIN,qBAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADL,CADV,CADL,CATJ,CAAR;AAkBH","sourcesContent":["import React from \"react\";\r\nimport {useState,useContext, useCallback} from 'react'\r\nimport './TaskHolder.css'\r\nimport {TaskController} from './TaskController/TaskController';\r\nimport {Task} from '../Task/Task';\r\nimport { addLodaing } from '../../HOCs/LoaderHOC';\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport { Selector } from '../Selector/Selector';\r\nimport { TaskFilterOptions, TaskFilter } from '../../Constants/Constants.js';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport {addTask,removeTask,changeDoneState} from '../../redux/tasker'\r\n\r\nconst TaskWithLoading = addLodaing(Task);\r\n\r\nexport function TaskHolder(){\r\n\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const {tasks} = useSelector((state)=>state.tasks);\r\n    const dispatch = useDispatch();\r\n    const [taskFilterName, setTaskFilter] = useState(TaskFilter.All.name);\r\n    const changeDoneTaskHandler = useCallback(taskId=>dispatch(changeDoneState(taskId)),[]);\r\n\r\n    const changeFilterHandler = (e) =>{\r\n        setTaskFilter(e.target.value);\r\n    }\r\n\r\n    const removeTaskHandler = useCallback(taskId =>dispatch(removeTask(taskId)),[]);\r\n    \r\n    const addTaskHandler = useCallback((task)=>dispatch(addTask(task)));\r\n\r\n    return (<div className={`TaskHolder ${theme}`}>\r\n                <div className='MainInfo'>\r\n                    <h2>Управление заданиями</h2>\r\n                        <TaskController addTaskParentHandler = {addTaskHandler}/>\r\n                        <Selector title='Показать' \r\n                                        options={TaskFilterOptions}\r\n                                        changeValueParentHandler = {changeFilterHandler}\r\n                                        parentValue ={taskFilterName} />\r\n                </div>\r\n                <ul>\r\n                    {[...tasks].filter(TaskFilter[taskFilterName].func)\r\n                    .map(task=><li key = {task.id}>\r\n                                    <TaskWithLoading {...task} \r\n                                    removeTaskParentHandler = {removeTaskHandler}\r\n                                    changeDoneTaskParentHandler = {changeDoneTaskHandler}/> \r\n                                </li>)}\r\n                </ul>\r\n            </div> )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}