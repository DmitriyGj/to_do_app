{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Components\\\\TaskHolder\\\\TaskHolder.jsx\";\nimport React from \"react\";\nimport { useState, useContext, useCallback } from 'react';\nimport './TaskHolder.css';\nimport { TaskController } from './TaskController/TaskController';\nimport { Task } from '../Task/Task';\nimport { addLodaing } from '../../HOCs/LoaderHOC';\nimport { ThemeContext } from '../../contexts/ThemeContext';\nimport { Selector } from '../Selector/Selector';\nimport { TaskFilterOptions, TaskFilter } from '../../Constants/Constants.js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTask, removeTask } from '../../redux/tasker';\nconst TaskWithLoading = addLodaing(Task);\nexport function TaskHolder(props) {\n  const theme = useContext(ThemeContext);\n  const {\n    tasks\n  } = useSelector(state => state.tasks);\n  const [taskFilterName, setTaskFilter] = useState(TaskFilter.All.name);\n  const changeDoneTaskHandler = useCallback(taskId => {\n    setTasks(tasks.map(initTask => initTask.id === taskId ? { ...initTask,\n      done: !initTask.done\n    } : initTask));\n  }, [tasks]);\n\n  const changeFilterHandler = e => {\n    setTaskFilter(e.target.value);\n  };\n\n  const removeTaskHandler = useCallback(taskId => {\n    setTasks(tasks.filter(displayTask => displayTask.id !== taskId));\n  }, [tasks]);\n  const addTaskHandler = useCallback(task => {\n    const unique = tasks.every(instTask => instTask.title !== task.title);\n\n    if (!unique) {\n      alert('Такое задание уже существует');\n      return;\n    }\n\n    setTasks([...tasks, task]);\n  }, [tasks]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `TaskHolder ${theme}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MainInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u044F\\u043C\\u0438\"), /*#__PURE__*/React.createElement(TaskController, {\n    addTaskParentHandler: addTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Selector, {\n    title: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C\",\n    options: TaskFilterOptions,\n    changeValueParentHandler: changeFilterHandler,\n    parentValue: taskFilterName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, [...tasks].filter(TaskFilter[taskFilterName].func).map(task => /*#__PURE__*/React.createElement(\"li\", {\n    key: task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 32\n    }\n  }, /*#__PURE__*/React.createElement(TaskWithLoading, Object.assign({}, task, {\n    removeTaskParentHandler: removeTaskHandler,\n    changeDoneTaskParentHandler: changeDoneTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 37\n    }\n  }))))));\n}","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Components/TaskHolder/TaskHolder.jsx"],"names":["React","useState","useContext","useCallback","TaskController","Task","addLodaing","ThemeContext","Selector","TaskFilterOptions","TaskFilter","useDispatch","useSelector","addTask","removeTask","TaskWithLoading","TaskHolder","props","theme","tasks","state","taskFilterName","setTaskFilter","All","name","changeDoneTaskHandler","taskId","setTasks","map","initTask","id","done","changeFilterHandler","e","target","value","removeTaskHandler","filter","displayTask","addTaskHandler","task","unique","every","instTask","title","alert","func"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {useState,useContext, useCallback} from 'react'\r\nimport './TaskHolder.css'\r\nimport {TaskController} from './TaskController/TaskController';\r\nimport {Task} from '../Task/Task';\r\nimport { addLodaing } from '../../HOCs/LoaderHOC';\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport { Selector } from '../Selector/Selector';\r\nimport { TaskFilterOptions, TaskFilter } from '../../Constants/Constants.js';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport {addTask,removeTask} from '../../redux/tasker'\r\n\r\nconst TaskWithLoading = addLodaing(Task);\r\n\r\nexport function TaskHolder(props){\r\n\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const {tasks} = useSelector((state)=>state.tasks);\r\n    const [taskFilterName, setTaskFilter] = useState(TaskFilter.All.name);\r\n    \r\n\r\n    const changeDoneTaskHandler = useCallback((taskId) =>\r\n        {setTasks( tasks.map(initTask => initTask.id === taskId ? {...initTask,done:!initTask.done}:initTask ))}\r\n        ,[tasks]);\r\n\r\n    const changeFilterHandler = (e) =>{\r\n        setTaskFilter(e.target.value);\r\n    }\r\n\r\n    const removeTaskHandler = useCallback((taskId) => \r\n        {setTasks(tasks.filter(displayTask => displayTask.id !== taskId))},\r\n        [tasks])\r\n    \r\n    const addTaskHandler = useCallback((task)=>\r\n    {const unique = tasks.every(instTask => instTask.title !== task.title)\r\n        if(!unique){\r\n            alert('Такое задание уже существует')\r\n            return;\r\n        }\r\n        setTasks( [...tasks,task ]);}\r\n        ,[tasks])\r\n\r\n    return (<div className={`TaskHolder ${theme}`}>\r\n                <div className='MainInfo'>\r\n                    <h2>Управление заданиями</h2>\r\n                        <TaskController addTaskParentHandler = {addTaskHandler}/>\r\n                        <Selector title='Показать' \r\n                                        options={TaskFilterOptions}\r\n                                        changeValueParentHandler = {changeFilterHandler}\r\n                                        parentValue ={taskFilterName} />\r\n                </div>\r\n                <ul>\r\n                    {[...tasks].filter(TaskFilter[taskFilterName].func)\r\n                    .map(task=><li key = {task.id}>\r\n                                    <TaskWithLoading {...task} \r\n                                    removeTaskParentHandler = {removeTaskHandler}\r\n                                    changeDoneTaskParentHandler = {changeDoneTaskHandler}/> \r\n                                </li>)}\r\n                </ul>\r\n            </div> )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}