{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Components\\\\TaskHolder\\\\TaskController\\\\TaskController.tsx\";\nimport React from \"react\";\nimport { useState, useContext } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { ThemeContext } from '../../../contexts/ThemeContext';\nimport './TaskContoller.css';\nimport { Selector } from \"../../Selector/Selector.tsx\";\nimport { TaskPriority, TaskPriorityOptions } from \"../../../Constants/Constants\";\nexport function TaskController(props) {\n  const [taskTitle, setTaskTitle] = useState('');\n  const [taskPriority, setTaskPriority] = useState(TaskPriority.Low);\n  const theme = useContext(ThemeContext);\n\n  const changeTaskPriorityHandler = e => {\n    setTaskPriority(TaskPriority[e.target.value]);\n  };\n\n  const addTaskHandler = () => {\n    if (!taskTitle) {\n      alert('Название не может быть пустым');\n      return;\n    }\n\n    props.addTaskParentHandler({\n      id: uuid(),\n      done: false,\n      priority: taskPriority,\n      title: taskTitle\n    });\n    setTaskTitle('');\n    setTaskPriority('Low');\n  };\n\n  const changeTaskTitleHandler = e => {\n    setTaskTitle(e.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `TaskController ${theme}Controller`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, \" \\u0417\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043E\\u043A\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: `${theme}ControllerInput`,\n    type: \"text\",\n    value: taskTitle,\n    onChange: changeTaskTitleHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Selector, {\n    title: \"\\u041F\\u0440\\u0438\\u043E\\u0440\\u0438\\u0442\\u0435\\u0442\",\n    options: TaskPriorityOptions,\n    parentValue: taskPriority,\n    changeValueParentHandler: changeTaskPriorityHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: `${theme}ControllerBtn`,\n    onClick: addTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"));\n}","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Components/TaskHolder/TaskController/TaskController.tsx"],"names":["React","useState","useContext","v4","uuid","ThemeContext","Selector","TaskPriority","TaskPriorityOptions","TaskController","props","taskTitle","setTaskTitle","taskPriority","setTaskPriority","Low","theme","changeTaskPriorityHandler","e","target","value","addTaskHandler","alert","addTaskParentHandler","id","done","priority","title","changeTaskTitleHandler"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,UAAlB,QAAmC,OAAnC;AACA,SAAQC,EAAE,IAAIC,IAAd,QAAyB,MAAzB;AACA,SAASC,YAAT,QAA4B,gCAA5B;AACA,OAAO,qBAAP;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,YAAT,EAAsBC,mBAAtB,QAAiD,8BAAjD;AAGA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAAiD;AAEpD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAS,EAAT,CAA1C;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAASM,YAAY,CAACQ,GAAtB,CAAhD;AAEA,QAAMC,KAAK,GAAGd,UAAU,CAACG,YAAD,CAAxB;;AAEA,QAAMY,yBAAyB,GAAIC,CAAD,IAAgD;AAC9EJ,IAAAA,eAAe,CAACP,YAAY,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb,CAAf;AACH,GAFD;;AAIA,QAAMC,cAAc,GAAG,MAAK;AACxB,QAAG,CAACV,SAAJ,EAAc;AACVW,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACA;AACH;;AAEDZ,IAAAA,KAAK,CAACa,oBAAN,CAA2B;AAACC,MAAAA,EAAE,EAACpB,IAAI,EAAR;AACvBqB,MAAAA,IAAI,EAAC,KADkB;AAEvBC,MAAAA,QAAQ,EAACb,YAFc;AAGvBc,MAAAA,KAAK,EAAEhB;AAHgB,KAA3B;AAKAC,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH,GAbD;;AAeA,QAAMc,sBAAsB,GAAIV,CAAD,IAAgD;AAC3EN,IAAAA,YAAY,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACH,GAFD;;AAIA,sBAAQ;AAAK,IAAA,SAAS,EAAG,kBAAiBJ,KAAM,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DADJ,eAEI;AAAO,IAAA,SAAS,EAAG,GAAEA,KAAM,iBAA3B;AACQ,IAAA,IAAI,EAAG,MADf;AAEQ,IAAA,KAAK,EAAEL,SAFf;AAGQ,IAAA,QAAQ,EAAEiB,sBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,eASI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,wDAAhB;AACgB,IAAA,OAAO,EAAGpB,mBAD1B;AAEgB,IAAA,WAAW,EAAGK,YAF9B;AAGgB,IAAA,wBAAwB,EAAII,yBAH5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,eAaI;AAAQ,IAAA,SAAS,EAAG,GAAED,KAAM,eAA5B;AACQ,IAAA,OAAO,EAAEK,cADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAbJ,CAAR;AAgBH","sourcesContent":["import React from \"react\";\r\nimport {useState, useContext} from \"react\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport { ThemeContext} from '../../../contexts/ThemeContext';\r\nimport './TaskContoller.css';\r\nimport { Selector } from \"../../Selector/Selector.tsx\";\r\nimport { TaskPriority,TaskPriorityOptions } from \"../../../Constants/Constants\";\r\nimport { TaskContollerProps } from \"./TaskControllerModel\";\r\n\r\nexport function TaskController(props:TaskContollerProps){\r\n\r\n    const [taskTitle, setTaskTitle] = useState<string>('');\r\n    const [taskPriority, setTaskPriority] = useState<string>(TaskPriority.Low)\r\n\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const changeTaskPriorityHandler = (e:React.ChangeEvent<HTMLSelectElement>):void =>{\r\n        setTaskPriority(TaskPriority[e.target.value]);\r\n    };\r\n\r\n    const addTaskHandler = () =>{\r\n        if(!taskTitle){\r\n            alert('Название не может быть пустым')\r\n            return;\r\n        }\r\n\r\n        props.addTaskParentHandler({id:uuid(),\r\n            done:false,\r\n            priority:taskPriority,\r\n            title :taskTitle});\r\n            \r\n        setTaskTitle('');\r\n        setTaskPriority('Low');    \r\n    }\r\n\r\n    const changeTaskTitleHandler = (e:React.ChangeEvent<HTMLInputElement>):void => {\r\n        setTaskTitle(e.target.value);\r\n    }\r\n\r\n    return( <div className={`TaskController ${theme}Controller`}>\r\n                <div>\r\n                    <label> Заголовок</label>\r\n                    <input className={`${theme}ControllerInput`} \r\n                            type = 'text' \r\n                            value={taskTitle}\r\n                            onChange={changeTaskTitleHandler} />\r\n                </div>\r\n               \r\n                <Selector title='Приоритет'\r\n                                options ={TaskPriorityOptions}\r\n                                parentValue ={taskPriority}\r\n                                changeValueParentHandler = {changeTaskPriorityHandler}/>\r\n                <button className={`${theme}ControllerBtn`} \r\n                        onClick={addTaskHandler}>Добавить</button>\r\n            </div>);\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}