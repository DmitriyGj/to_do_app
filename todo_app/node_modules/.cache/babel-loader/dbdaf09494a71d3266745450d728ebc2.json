{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Components\\\\TaskHolder\\\\TaskHolder.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useCallback } from 'react';\nimport './TaskHolder.css';\nimport { TaskController } from \"./TaskController/TaskController\";\nimport { Task } from \"../Task/Task\";\nimport { addLodaing } from '../../HOCs/LoaderHOC';\nimport { ThemeContext } from '../../contexts/ThemeContext';\nimport { Selector } from '../Selector/Selector';\nimport { TaskFilterOptions, TaskFilterFunctions } from '../../Constants/Constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskWithLoading = addLodaing(Task);\n_c = TaskWithLoading;\nexport function TaskHolder(props) {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [taskFilterName, setTaskFilter] = useState('All');\n  const theme = useContext(ThemeContext);\n\n  const changeDoneTaskHandler = taskId => {\n    setTasks(tasks.map(initTask => initTask.id === taskId ? { ...initTask,\n      done: !initTask.done\n    } : initTask));\n  };\n\n  const changeFilterHandler = e => {\n    setTaskFilter(e.target.value);\n  };\n\n  const removeTaskHandler = taskId => {\n    setTasks(tasks.filter(displayTask => displayTask.id !== taskId));\n  };\n\n  const addTaskHandler = task => {\n    const unique = tasks.every(instTask => instTask.title !== task.title);\n\n    if (!unique) {\n      alert('Такое задание уже существует');\n      return;\n    }\n\n    setTasks([...tasks, task]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `TaskHolder ${theme}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MainInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u044F\\u043C\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TaskController, {\n        addTaskParentHandler: addTaskHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Selector, {\n        title: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C\",\n        options: TaskFilterOptions,\n        changeValueParentHandler: changeFilterHandler,\n        parentValue: taskFilterName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [...tasks].filter(TaskFilterFunctions[taskFilterName]).map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(TaskWithLoading, { ...task,\n          removeTaskParentHandler: removeTaskHandler,\n          changeDoneTaskParentHandler: changeDoneTaskHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 37\n        }, this)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 13\n  }, this);\n}\n\n_s(TaskHolder, \"wqFWZGr9cW7kHdSH2TOHYdZefGY=\");\n\n_c2 = TaskHolder;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskWithLoading\");\n$RefreshReg$(_c2, \"TaskHolder\");","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Components/TaskHolder/TaskHolder.jsx"],"names":["useState","useContext","useCallback","TaskController","Task","addLodaing","ThemeContext","Selector","TaskFilterOptions","TaskFilterFunctions","TaskWithLoading","TaskHolder","props","tasks","setTasks","taskFilterName","setTaskFilter","theme","changeDoneTaskHandler","taskId","map","initTask","id","done","changeFilterHandler","e","target","value","removeTaskHandler","filter","displayTask","addTaskHandler","task","unique","every","instTask","title","alert"],"mappings":"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","sourcesContent":["import {useState,useContext, useCallback} from 'react'\r\nimport './TaskHolder.css'\r\nimport {TaskController} from \"./TaskController/TaskController\";\r\nimport {Task} from \"../Task/Task\";\r\nimport { addLodaing } from '../../HOCs/LoaderHOC';\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport { Selector } from '../Selector/Selector';\r\nimport { TaskFilterOptions, TaskFilterFunctions } from '../../Constants/Constants.js';\r\n\r\nconst TaskWithLoading = addLodaing(Task);\r\n\r\nexport function TaskHolder(props){\r\n    const [tasks,setTasks] = useState([]);\r\n    const [taskFilterName, setTaskFilter] = useState('All');\r\n    \r\n    const theme = useContext(ThemeContext);\r\n\r\n    const changeDoneTaskHandler = (taskId) =>{\r\n        setTasks( tasks.map(initTask => initTask.id === taskId ? {...initTask,done:!initTask.done}:initTask ))\r\n    }\r\n\r\n    const changeFilterHandler = (e) =>{\r\n        setTaskFilter(e.target.value);\r\n    }\r\n\r\n    const removeTaskHandler = (taskId) => {\r\n        setTasks(tasks.filter(displayTask => displayTask.id !== taskId))\r\n    }\r\n\r\n    const addTaskHandler = (task) => {\r\n        const unique = tasks.every(instTask => instTask.title !== task.title)\r\n        if(!unique){\r\n            alert('Такое задание уже существует')\r\n            return;\r\n        }\r\n        setTasks( [...tasks,task ]);\r\n    }\r\n\r\n    return (<div className={`TaskHolder ${theme}`}>\r\n                <div className='MainInfo'>\r\n                    <h2>Управление заданиями</h2>\r\n                        <TaskController addTaskParentHandler = {addTaskHandler}/>\r\n                        <Selector title='Показать' \r\n                                        options={TaskFilterOptions}\r\n                                        changeValueParentHandler = {changeFilterHandler}\r\n                                        parentValue ={taskFilterName} />\r\n                </div>\r\n                <ul>\r\n                    {[...tasks].filter(TaskFilterFunctions[taskFilterName])\r\n                    .map(task=><li key = {task.id}>\r\n                                    <TaskWithLoading {...task} \r\n                                    removeTaskParentHandler = {removeTaskHandler}\r\n                                    changeDoneTaskParentHandler = {changeDoneTaskHandler}/> \r\n                                </li>)}\r\n                </ul>\r\n            </div> )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}