{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Components\\\\TaskHolder\\\\TaskController\\\\TaskController.js\",\n    _s = $RefreshSig$();\n\nimport { PrioritySelector } from \"../PrioritySelector/PrioritySelector\";\nimport { useState, useContext } from \"react\";\nimport uuid from \"react-uuid\";\nimport { ThemeContext } from '../../../contexts/ThemeContext';\nimport './TaskContoller.css';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TaskController(props) {\n  _s();\n\n  const [taskTitle, setTaskTitle] = useState('');\n  const [taskPriority, setTaskPriority] = useState('Low');\n  const theme = useContext(ThemeContext);\n\n  const changeTaskPriorityHandler = e => {\n    setTaskPriority(e.target.value);\n  };\n\n  const addTaskHandler = () => {\n    if (!taskTitle) {\n      alert('Название не может быть пустым');\n      return;\n    }\n\n    props.addTaskParentHandler({\n      id: uuid(),\n      done: false,\n      priority: taskPriority,\n      title: taskTitle\n    });\n    setTaskTitle('');\n    setTaskPriority('Low');\n  };\n\n  const changeTaskTitleHandler = e => {\n    setTaskTitle(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `TaskController ${theme}Controller`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" \\u0417\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043E\\u043A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: theme + 'ControllerInput',\n        type: \"text\",\n        value: taskTitle,\n        onChange: changeTaskTitleHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(PrioritySelector, {\n      parentValue: taskPriority,\n      parentChangePriorityHandler: changeTaskPriorityHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: theme + 'ControllerBtn',\n      onClick: addTaskHandler,\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 13\n  }, this);\n}\n\n_s(TaskController, \"1jVXTkSn5dzKeLO7OyPHEyzfWHs=\");\n\n_c = TaskController;\nTaskController.propTypes = {\n  taskTitle: PropTypes.string,\n  taskPriority: PropTypes.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskController\");","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Components/TaskHolder/TaskController/TaskController.js"],"names":["PrioritySelector","useState","useContext","uuid","ThemeContext","PropTypes","TaskController","props","taskTitle","setTaskTitle","taskPriority","setTaskPriority","theme","changeTaskPriorityHandler","e","target","value","addTaskHandler","alert","addTaskParentHandler","id","done","priority","title","changeTaskTitleHandler","propTypes","string"],"mappings":";;;AAAA,SAAQA,gBAAR,QAA+B,sCAA/B;AACA,SAAQC,QAAR,EAAkBC,UAAlB,QAAmC,OAAnC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,YAAT,QAA4B,gCAA5B;AACA,OAAO,qBAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAAA;;AAEjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAMW,KAAK,GAAGV,UAAU,CAACE,YAAD,CAAxB;;AAEA,QAAMS,yBAAyB,GAAIC,CAAD,IAAM;AACpCH,IAAAA,eAAe,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACH,GAFD;;AAIA,QAAMC,cAAc,GAAG,MAAK;AACxB,QAAG,CAACT,SAAJ,EAAc;AACVU,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACA;AACH;;AAEDX,IAAAA,KAAK,CAACY,oBAAN,CAA2B;AAACC,MAAAA,EAAE,EAACjB,IAAI,EAAR;AACvBkB,MAAAA,IAAI,EAAC,KADkB;AAEvBC,MAAAA,QAAQ,EAACZ,YAFc;AAGvBa,MAAAA,KAAK,EAAEf;AAHgB,KAA3B;AAKAC,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH,GAbD;;AAeA,QAAMa,sBAAsB,GAAIV,CAAD,IAAO;AAClCL,IAAAA,YAAY,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACH,GAFD;;AAIA,sBAAQ;AAAK,IAAA,SAAS,EAAG,kBAAiBJ,KAAM,YAAxC;AAAA,4BACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,SAAS,EAAEA,KAAK,GAAC,iBAAxB;AACQ,QAAA,IAAI,EAAG,MADf;AAEQ,QAAA,KAAK,EAAEJ,SAFf;AAGQ,QAAA,QAAQ,EAAEgB;AAHlB;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eASI,QAAC,gBAAD;AAAkB,MAAA,WAAW,EAAGd,YAAhC;AACY,MAAA,2BAA2B,EAAIG;AAD3C;AAAA;AAAA;AAAA;AAAA,YATJ,eAWI;AAAQ,MAAA,SAAS,EAAED,KAAK,GAAC,eAAzB;AAA0C,MAAA,OAAO,EAAEK,cAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAaH;;GA3CeX,c;;KAAAA,c;AA6ChBA,cAAc,CAACmB,SAAf,GAA0B;AACtBjB,EAAAA,SAAS,EAAEH,SAAS,CAACqB,MADC;AAEtBhB,EAAAA,YAAY,EAAEL,SAAS,CAACqB;AAFF,CAA1B","sourcesContent":["import {PrioritySelector} from \"../PrioritySelector/PrioritySelector\";\r\nimport {useState, useContext} from \"react\";\r\nimport uuid from \"react-uuid\";\r\nimport { ThemeContext} from '../../../contexts/ThemeContext';\r\nimport './TaskContoller.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport function TaskController(props){\r\n\r\n    const [taskTitle, setTaskTitle] = useState('');\r\n    const [taskPriority, setTaskPriority] = useState('Low')\r\n\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const changeTaskPriorityHandler = (e) =>{\r\n        setTaskPriority(e.target.value);\r\n    };\r\n\r\n    const addTaskHandler = () =>{\r\n        if(!taskTitle){\r\n            alert('Название не может быть пустым')\r\n            return;\r\n        }\r\n\r\n        props.addTaskParentHandler({id:uuid(),\r\n            done:false,\r\n            priority:taskPriority,\r\n            title :taskTitle});\r\n            \r\n        setTaskTitle('');\r\n        setTaskPriority('Low');    \r\n    }\r\n\r\n    const changeTaskTitleHandler = (e) => {\r\n        setTaskTitle(e.target.value);\r\n    }\r\n\r\n    return( <div className={`TaskController ${theme}Controller`}>\r\n                <div>\r\n                    <label> Заголовок</label>\r\n                    <input className={theme+'ControllerInput'} \r\n                            type = 'text' \r\n                            value={taskTitle}\r\n                            onChange={changeTaskTitleHandler} />\r\n                </div>\r\n               \r\n                <PrioritySelector parentValue ={taskPriority}\r\n                            parentChangePriorityHandler = {changeTaskPriorityHandler}/>\r\n                <button className={theme+'ControllerBtn'} onClick={addTaskHandler}>Добавить</button>\r\n            </div>);\r\n}\r\n\r\nTaskController.propTypes ={\r\n    taskTitle: PropTypes.string,\r\n    taskPriority: PropTypes.string\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}