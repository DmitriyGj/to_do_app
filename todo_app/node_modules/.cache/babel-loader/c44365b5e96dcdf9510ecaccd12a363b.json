{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  tasks: []\n};\nexport const taskerSlice = createSlice({\n  name: 'tasker',\n  initialState,\n  reducers: {\n    addTask: (state, action) => {\n      if (state.tasks.some(initTask => initTask.title === action.task.title)) {} else {\n        state.tasks.push(action.task);\n      }\n    },\n    removeTask: (state, action) => {\n      state.tasks = state.tasks.filter(initTask => initTask.id !== action.task.id);\n    }\n  }\n});\nexport const {\n  addTask,\n  removeTask\n} = taskerSlice.actions;\nexport default taskerSlice.reducer;","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/redux/tasker.js"],"names":["createSlice","initialState","tasks","taskerSlice","name","reducers","addTask","state","action","some","initTask","title","task","push","removeTask","filter","id","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AAACC,EAAAA,KAAK,EAAC;AAAP,CAArB;AAEA,OAAO,MAAMC,WAAW,GAAGH,WAAW,CAAC;AACnCI,EAAAA,IAAI,EAAC,QAD8B;AAEnCH,EAAAA,YAFmC;AAGnCI,EAAAA,QAAQ,EAAC;AACLC,IAAAA,OAAO,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACpB,UAAGD,KAAK,CAACL,KAAN,CAAYO,IAAZ,CAAiBC,QAAQ,IAAGA,QAAQ,CAACC,KAAT,KAAmBH,MAAM,CAACI,IAAP,CAAYD,KAA3D,CAAH,EAAqE,CAEpE,CAFD,MAGI;AACAJ,QAAAA,KAAK,CAACL,KAAN,CAAYW,IAAZ,CAAiBL,MAAM,CAACI,IAAxB;AACH;AACJ,KARI;AASLE,IAAAA,UAAU,EAAC,CAACP,KAAD,EAAOC,MAAP,KAAgB;AACvBD,MAAAA,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYa,MAAZ,CAAmBL,QAAQ,IAAGA,QAAQ,CAACM,EAAT,KAAgBR,MAAM,CAACI,IAAP,CAAYI,EAA1D,CAAd;AACH;AAXI;AAH0B,CAAD,CAA/B;AAkBP,OAAO,MAAM;AAACV,EAAAA,OAAD;AAAUQ,EAAAA;AAAV,IAAwBX,WAAW,CAACc,OAA1C;AACP,eAAed,WAAW,CAACe,OAA3B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {tasks:[]};\r\n\r\nexport const taskerSlice = createSlice({\r\n    name:'tasker',\r\n    initialState,\r\n    reducers:{\r\n        addTask:(state,action)=>{\r\n            if(state.tasks.some(initTask=> initTask.title === action.task.title)){\r\n                \r\n            }\r\n            else{\r\n                state.tasks.push(action.task);\r\n            }\r\n        },\r\n        removeTask:(state,action)=>{\r\n            state.tasks = state.tasks.filter(initTask=> initTask.id !== action.task.id);\r\n        }\r\n    }\r\n});\r\n\r\nexport const {addTask, removeTask} = taskerSlice.actions;\r\nexport default taskerSlice.reducer;"]},"metadata":{},"sourceType":"module"}