{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Components\\\\TaskHolder\\\\TaskHolder.jsx\";\nimport { Component } from 'react';\nimport './TaskHolder.css';\nimport { Selector } from '../Selector/Selector';\nimport { TaskFilter, TaskFilterFunctions } from '../../constants';\nimport { TaskController } from \"./TaskController/TaskController\";\nimport { Task } from \"../Task/Task\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TaskHolder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      taskFilterName: 'All'\n    };\n    this.addTaskHandler = this.addTaskHandler.bind(this);\n    this.removeTaskHandler = this.removeTaskHandler.bind(this);\n    this.changeFilterHandler = this.changeFilterHandler.bind(this);\n    this.changeDoneTaskHandler = this.changeDoneTaskHandler.bind(this);\n  }\n\n  changeDoneTaskHandler(taskId) {\n    this.setState({\n      tasks: this.state.tasks.map(initTask => initTask.id === taskId ? { ...initTask,\n        done: !initTask.done\n      } : initTask)\n    });\n  }\n\n  changeFilterHandler(e) {\n    this.setState({\n      taskFilter: TaskFilterFunctions[e.target.value]\n    });\n  }\n\n  removeTaskHandler(taskId) {\n    this.setState({\n      tasks: this.state.tasks.filter(displayTask => displayTask.id !== taskId)\n    });\n  }\n\n  addTaskHandler(task) {\n    const unique = this.state.tasks.every(instTask => instTask.title !== task.title);\n\n    if (!unique) {\n      alert('Такое задание уже существует');\n      return;\n    }\n\n    this.setState(prevState => {\n      return {\n        tasks: [...prevState.tasks, task]\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TaskHolder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MainInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u044F\\u043C\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TaskController, {\n          parent: this\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Selector, {\n          title: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C\",\n          options: TaskFilter,\n          parentChangeValueHandler: this.changeFilterHandler,\n          parentFilterValue: this.state.taskFilterName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [...this.state.tasks].filter(TaskFilterFunctions[this.state.taskFilterName]).map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Task, { ...task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 97\n          }, this)\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 113\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport { TaskHolder };","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Components/TaskHolder/TaskHolder.jsx"],"names":["Component","Selector","TaskFilter","TaskFilterFunctions","TaskController","Task","TaskHolder","constructor","props","state","tasks","taskFilterName","addTaskHandler","bind","removeTaskHandler","changeFilterHandler","changeDoneTaskHandler","taskId","setState","map","initTask","id","done","e","taskFilter","target","value","filter","displayTask","task","unique","every","instTask","title","alert","prevState","render"],"mappings":"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","sourcesContent":["import {Component} from 'react'\r\nimport './TaskHolder.css'\r\nimport { Selector } from '../Selector/Selector';\r\nimport { TaskFilter , TaskFilterFunctions} from '../../constants';\r\nimport {TaskController} from \"./TaskController/TaskController\";\r\nimport {Task} from \"../Task/Task\";\r\n\r\nclass TaskHolder extends  Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            tasks:[ ],\r\n            taskFilterName:'All'\r\n        };\r\n\r\n        this.addTaskHandler = this.addTaskHandler.bind(this);\r\n        this.removeTaskHandler = this.removeTaskHandler.bind(this);\r\n        this.changeFilterHandler = this.changeFilterHandler.bind(this);\r\n        this.changeDoneTaskHandler = this.changeDoneTaskHandler.bind(this);\r\n    }\r\n\r\n    changeDoneTaskHandler(taskId){\r\n        this.setState({tasks: this.state.tasks.map(initTask => initTask.id === taskId ? {...initTask,done:!initTask.done}:initTask )})\r\n    }\r\n\r\n    changeFilterHandler(e){\r\n        this.setState({taskFilter:TaskFilterFunctions[e.target.value]});\r\n    }\r\n\r\n    removeTaskHandler(taskId) {\r\n        this.setState({tasks: this.state.tasks.filter(displayTask => displayTask.id !== taskId)})\r\n    }\r\n\r\n    addTaskHandler(task){\r\n        const unique = this.state.tasks.every(instTask => instTask.title !== task.title)\r\n        if(!unique){\r\n            alert('Такое задание уже существует')\r\n            return;\r\n        }\r\n        this.setState((prevState)=>{return {tasks:[...prevState.tasks,task ]}});\r\n    }\r\n\r\n    render() {\r\n        return <div className='TaskHolder'>\r\n                    <div className='MainInfo'>\r\n                        <h2>Управление заданиями</h2>\r\n                        <TaskController parent = {this}/>\r\n                        <Selector title='Показать' \r\n                                        options={TaskFilter}\r\n                                        parentChangeValueHandler = {this.changeFilterHandler}\r\n                                        parentFilterValue ={this.state.taskFilterName} />\r\n                    </div>\r\n                    <ul>\r\n                        {[...this.state.tasks].filter(TaskFilterFunctions[this.state.taskFilterName]).map(task=><li key = {task.id}>\r\n                                                                                                <Task {...task}/> \r\n                                                                                            </li>)}\r\n                    </ul>\r\n               </div>\r\n    }\r\n}\r\n\r\nexport {TaskHolder}"]},"metadata":{},"sourceType":"module"}