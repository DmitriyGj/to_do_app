{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { v4 as uuid } from 'uuid';\nconst initialState = {\n  tasks: []\n};\nexport const tasksSlice = createSlice({\n  name: 'Tasks',\n  initialState,\n  reducers: {\n    addTask: (state, action) => {\n      if (state.tasks.some(initTask => initTask.title === action.payload.title)) {\n        alert('Такое задание уже существует');\n        return state;\n      }\n\n      const today = new Date();\n      console.log(Date.parse(action.payload.deadLine), today.getMilliseconds());\n\n      if (Date.parse(action.payload.deadLine) < today.getMilliseconds()) {\n        alert('Дата не может быть ментше текущей');\n        return state;\n      }\n\n      state.tasks.push({ ...action.payload,\n        id: uuid(),\n        done: false\n      });\n    },\n    removeTask: (state, action) => {\n      const taskId = action.payload;\n      state.tasks = state.tasks.filter(initTask => initTask.id !== taskId);\n    },\n    changeDoneState: (state, action) => {\n      const taskId = action.payload;\n      state.tasks = state.tasks.map(initTask => initTask.id === taskId ? { ...initTask,\n        done: !initTask.done\n      } : initTask);\n    },\n    editTask: (state, action) => {\n      const {\n        id,\n        ...rest\n      } = action.payload;\n      const indexOfTask = state.tasks.findIndex(task => task.id === id);\n      state.tasks[indexOfTask] = {\n        id: id,\n        ...rest\n      };\n    }\n  }\n});\nexport const {\n  addTask,\n  removeTask,\n  changeDoneState,\n  editTask\n} = tasksSlice.actions;\nexport const getTasks = state => {\n  const {\n    Filter,\n    Tasks\n  } = state;\n  return Tasks.tasks.filter(Filter.currentFilter.func);\n};\nexport default tasksSlice.reducer;","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/reducers/TaskReduser.ts"],"names":["createSlice","v4","uuid","initialState","tasks","tasksSlice","name","reducers","addTask","state","action","some","initTask","title","payload","alert","today","Date","console","log","parse","deadLine","getMilliseconds","push","id","done","removeTask","taskId","filter","changeDoneState","map","editTask","rest","indexOfTask","findIndex","task","actions","getTasks","Filter","Tasks","currentFilter","func","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport {RootState} from '../store/TaskManagerStore';\r\nimport {v4 as uuid} from 'uuid'\r\nimport {TaskState} from '../types/types';\r\n\r\nconst initialState:TaskState = {tasks:[] };\r\n\r\nexport const tasksSlice = createSlice({\r\n    name:'Tasks',\r\n    initialState,\r\n    reducers:{\r\n        addTask:(state,action)=>{\r\n            if(state.tasks.some(initTask=> initTask.title === action.payload.title)){\r\n                alert('Такое задание уже существует');\r\n                return state;\r\n            }\r\n            const today = new Date()\r\n            console.log(Date.parse(action.payload.deadLine), today.getMilliseconds())\r\n\r\n            if(Date.parse(action.payload.deadLine)<today.getMilliseconds())\r\n            {\r\n                alert('Дата не может быть ментше текущей');\r\n                return state;\r\n            }\r\n            state.tasks.push({...action.payload, id:uuid(),done:false});\r\n        },\r\n        removeTask:(state,action)=>{\r\n            const taskId = action.payload;\r\n            state.tasks = state.tasks.filter(initTask=> initTask.id !== taskId);\r\n        },\r\n        changeDoneState:(state,action)=>{\r\n            const taskId = action.payload;\r\n            state.tasks = state.tasks.map(initTask => initTask.id === taskId ? {...initTask,done:!initTask.done}:initTask );\r\n        },\r\n        editTask:(state,action)=>{\r\n            const {id,...rest} = action.payload;\r\n            const indexOfTask = state.tasks.findIndex(task=>task.id === id);\r\n            state.tasks[indexOfTask] = {id:id,...rest};\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport const {addTask, removeTask, changeDoneState,editTask} = tasksSlice.actions;\r\nexport const getTasks = (state:RootState)=>{\r\n    const {Filter,Tasks} = state;\r\n    return Tasks.tasks.filter(Filter.currentFilter.func);\r\n}\r\nexport default tasksSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}