{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { TaskFiltersBuffer } from '../constants/FilterConstants';\nconst initialState = {\n  currentFilter: TaskFiltersBuffer.All,\n  FiltersBuffer: TaskFiltersBuffer\n};\nexport const filterSlice = createSlice({\n  name: 'Filter',\n  initialState,\n  reducers: {\n    changeFilter: (state, action) => {\n      state.currentFilter = state.FiltersBuffer[action.payload];\n    }\n  }\n});\nexport const {\n  changeFilter\n} = filterSlice.actions;\nexport const getFilter = state => state.Filter.currentFilter;\n;\nexport default filterSlice.reducer;","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/reducers/FilterReducer.ts"],"names":["createSlice","TaskFiltersBuffer","initialState","currentFilter","All","FiltersBuffer","filterSlice","name","reducers","changeFilter","state","action","payload","actions","getFilter","Filter","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAAQC,iBAAR,QAAgC,8BAAhC;AAKA,MAAMC,YAAwB,GAAG;AAACC,EAAAA,aAAa,EAACF,iBAAiB,CAACG,GAAjC;AACbC,EAAAA,aAAa,EAACJ;AADD,CAAjC;AAGA,OAAO,MAAMK,WAAW,GAAGN,WAAW,CAAC;AACnCO,EAAAA,IAAI,EAAC,QAD8B;AAEnCL,EAAAA,YAFmC;AAGnCM,EAAAA,QAAQ,EAAC;AACLC,IAAAA,YAAY,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACzBD,MAAAA,KAAK,CAACP,aAAN,GAAsBO,KAAK,CAACL,aAAN,CAAoBM,MAAM,CAACC,OAA3B,CAAtB;AACH;AAHI;AAH0B,CAAD,CAA/B;AAWP,OAAO,MAAM;AAACH,EAAAA;AAAD,IAAiBH,WAAW,CAACO,OAAnC;AACP,OAAO,MAAMC,SAAS,GAAIJ,KAAD,IAAqBA,KAAK,CAACK,MAAN,CAAaZ,aAApD;AAAkE;AACzE,eAAeG,WAAW,CAACU,OAA3B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport {RootState} from '../store/TaskManagerStore';\r\nimport {TaskFiltersBuffer} from '../constants/FilterConstants';\r\nimport {FilterState} from '../types/types'\r\n\r\n\r\n\r\nconst initialState:FilterState = {currentFilter:TaskFiltersBuffer.All,\r\n                    FiltersBuffer:TaskFiltersBuffer}\r\n\r\nexport const filterSlice = createSlice({\r\n    name:'Filter',\r\n    initialState,\r\n    reducers:{\r\n        changeFilter:(state,action)=>{\r\n            state.currentFilter = state.FiltersBuffer[action.payload];\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport const {changeFilter} = filterSlice.actions;\r\nexport const getFilter = (state:RootState) => state.Filter.currentFilter;;\r\nexport default filterSlice.reducer;"]},"metadata":{},"sourceType":"module"}