{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Components\\\\TaskHolder\\\\TaskHolder.jsx\";\nimport React from \"react\";\nimport { useContext, useCallback } from 'react';\nimport './TaskHolder.css';\nimport { TaskController } from './TaskController/TaskController';\nimport { Task } from '../Task/Task';\nimport { addLodaing } from '../../HOCs/LoaderHOC';\nimport { ThemeContext } from '../../contexts/ThemeContext';\nimport { Selector } from '../Selector/Selector';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTask, removeTask, changeDoneState, setFilter } from '../../redux/tasks';\nimport { TaskFilter } from \"../../Constants/Constants\";\nconst TaskWithLoading = addLodaing(Task);\nexport function TaskHolder() {\n  const allSelector = createSelector(state, tasks.filter(TaskFilter.All));\n  const doneSelector = createSelector(state, state.tasks.filter(TaskFilter.Completed));\n  const notDoneSelector = createSelector(state, state.tasks.filter(TaskFilter.NotCompleted));\n  const theme = useContext(ThemeContext);\n  const {\n    tasks,\n    taskFilter,\n    TaskFilterOptions\n  } = useSelector(state => state.tasks);\n  const dispatch = useDispatch();\n  const changeFilterHandler = useCallback(e => dispatch(setFilter(e.target.value)), [dispatch]);\n  const changeDoneTaskHandler = useCallback(taskId => dispatch(changeDoneState(taskId)), [dispatch]);\n  const removeTaskHandler = useCallback(taskId => dispatch(removeTask(taskId)), [dispatch]);\n  const addTaskHandler = useCallback(task => dispatch(addTask(task)), [dispatch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `TaskHolder ${theme}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MainInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }, \"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u044F\\u043C\\u0438\"), /*#__PURE__*/React.createElement(TaskController, {\n    addTaskParentHandler: addTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Selector, {\n    title: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C\",\n    options: TaskFilterOptions,\n    changeValueParentHandler: changeFilterHandler,\n    parentValue: taskFilter.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, [...tasks].filter(taskFilter.func).map(task => /*#__PURE__*/React.createElement(\"li\", {\n    key: task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 67\n    }\n  }, /*#__PURE__*/React.createElement(TaskWithLoading, Object.assign({}, task, {\n    removeTaskParentHandler: removeTaskHandler,\n    changeDoneTaskParentHandler: changeDoneTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 33\n    }\n  }))))));\n}","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Components/TaskHolder/TaskHolder.jsx"],"names":["React","useContext","useCallback","TaskController","Task","addLodaing","ThemeContext","Selector","useDispatch","useSelector","addTask","removeTask","changeDoneState","setFilter","TaskFilter","TaskWithLoading","TaskHolder","allSelector","createSelector","state","tasks","filter","All","doneSelector","Completed","notDoneSelector","NotCompleted","theme","taskFilter","TaskFilterOptions","dispatch","changeFilterHandler","e","target","value","changeDoneTaskHandler","taskId","removeTaskHandler","addTaskHandler","task","name","func","map","id"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {useContext, useCallback} from 'react'\r\nimport './TaskHolder.css'\r\nimport {TaskController} from './TaskController/TaskController';\r\nimport {Task} from '../Task/Task';\r\nimport { addLodaing } from '../../HOCs/LoaderHOC';\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport { Selector } from '../Selector/Selector';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport {addTask,removeTask,changeDoneState,setFilter} from '../../redux/tasks'\r\nimport { TaskFilter } from \"../../Constants/Constants\";\r\n\r\nconst TaskWithLoading = addLodaing(Task);\r\nexport function TaskHolder(){\r\n    \r\n    const allSelector =createSelector(state, tasks.filter(TaskFilter.All));\r\n    const doneSelector = createSelector(state,state.tasks.filter(TaskFilter.Completed));\r\n    const notDoneSelector = createSelector(state,state.tasks.filter(TaskFilter.NotCompleted));\r\n\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const {tasks,taskFilter,TaskFilterOptions} = useSelector((state)=>state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeFilterHandler = useCallback((e) => dispatch(setFilter(e.target.value)),[dispatch])\r\n\r\n    const changeDoneTaskHandler = useCallback(taskId =>dispatch(changeDoneState(taskId)),[dispatch]);\r\n\r\n    const removeTaskHandler = useCallback(taskId => dispatch(removeTask(taskId)),[dispatch]);\r\n    \r\n    const addTaskHandler = useCallback(task=>dispatch(addTask(task)),[dispatch])\r\n\r\n\r\n    return (<div className={`TaskHolder ${theme}`}>\r\n                <div className='MainInfo'>\r\n                    <h2>Управление заданиями</h2>\r\n                        <TaskController addTaskParentHandler = {addTaskHandler}/>\r\n                        <Selector title='Показать' \r\n                                options={TaskFilterOptions}\r\n                                changeValueParentHandler = {changeFilterHandler}\r\n                                parentValue ={taskFilter.name} /> \r\n                </div>\r\n                <ul>\r\n                    {[...tasks].filter(taskFilter.func).map(task=><li key = {task.id}>\r\n                                <TaskWithLoading {...task} \r\n                                removeTaskParentHandler = {removeTaskHandler}\r\n                                changeDoneTaskParentHandler = {changeDoneTaskHandler}/> \r\n                            </li>)}\r\n                </ul>\r\n            </div> )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}