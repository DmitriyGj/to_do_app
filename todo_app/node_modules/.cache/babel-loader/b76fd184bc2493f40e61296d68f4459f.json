{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { TaskFilter } from \"../Constants/Constants\";\nconst initialState = {\n  tasks: [],\n  filteredTasks: [],\n  filter: TaskFilter.All\n};\nexport const tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    addTask: (state, action) => {\n      if (state.tasks.some(initTask => initTask.title === action.payload.title)) {\n        alert('Такое задание уже существует');\n      } else {\n        state.tasks.push(action.payload);\n      }\n    },\n    removeTask: (state, action) => {\n      const taskId = action.payload;\n      state.tasks = state.tasks.filter(initTask => initTask.id !== taskId);\n    },\n    changeDoneState: (state, action) => {\n      const taskId = action.payload;\n      state.tasks = state.tasks.map(initTask => initTask.id === taskId ? { ...initTask,\n        done: !initTask.done\n      } : initTask);\n    },\n    applyFilter: state => {\n      const filterfunc = state.filter.func;\n      state.filteredTasks = state.tasks.filter(filterfunc);\n    },\n    setFilter: (state, action) => {\n      const newFilterName = action.payload;\n      state.filter = TaskFilter[newFilterName];\n    }\n  }\n});\nexport const {\n  addTask,\n  removeTask,\n  changeDoneState,\n  applyFilter,\n  setFilter\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/redux/tasker.js"],"names":["createSlice","TaskFilter","initialState","tasks","filteredTasks","filter","All","tasksSlice","name","reducers","addTask","state","action","some","initTask","title","payload","alert","push","removeTask","taskId","id","changeDoneState","map","done","applyFilter","filterfunc","func","setFilter","newFilterName","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAEA,MAAMC,YAAY,GAAG;AAACC,EAAAA,KAAK,EAAC,EAAP;AACDC,EAAAA,aAAa,EAAC,EADb;AAELC,EAAAA,MAAM,EAACJ,UAAU,CAACK;AAFb,CAArB;AAIA,OAAO,MAAMC,UAAU,GAAGP,WAAW,CAAC;AAClCQ,EAAAA,IAAI,EAAC,OAD6B;AAElCN,EAAAA,YAFkC;AAGlCO,EAAAA,QAAQ,EAAC;AACLC,IAAAA,OAAO,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACpB,UAAGD,KAAK,CAACR,KAAN,CAAYU,IAAZ,CAAiBC,QAAQ,IAAGA,QAAQ,CAACC,KAAT,KAAmBH,MAAM,CAACI,OAAP,CAAeD,KAA9D,CAAH,EAAwE;AACpEE,QAAAA,KAAK,CAAC,8BAAD,CAAL;AACH,OAFD,MAGI;AACAN,QAAAA,KAAK,CAACR,KAAN,CAAYe,IAAZ,CAAiBN,MAAM,CAACI,OAAxB;AACH;AACJ,KARI;AASLG,IAAAA,UAAU,EAAC,CAACR,KAAD,EAAOC,MAAP,KAAgB;AACvB,YAAMQ,MAAM,GAAGR,MAAM,CAACI,OAAtB;AACAL,MAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACR,KAAN,CAAYE,MAAZ,CAAmBS,QAAQ,IAAGA,QAAQ,CAACO,EAAT,KAAgBD,MAA9C,CAAd;AACH,KAZI;AAaLE,IAAAA,eAAe,EAAC,CAACX,KAAD,EAAOC,MAAP,KAAgB;AAC5B,YAAMQ,MAAM,GAAGR,MAAM,CAACI,OAAtB;AACAL,MAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACR,KAAN,CAAYoB,GAAZ,CAAgBT,QAAQ,IAAIA,QAAQ,CAACO,EAAT,KAAgBD,MAAhB,GAAyB,EAAC,GAAGN,QAAJ;AAAaU,QAAAA,IAAI,EAAC,CAACV,QAAQ,CAACU;AAA5B,OAAzB,GAA2DV,QAAvF,CAAd;AACH,KAhBI;AAiBLW,IAAAA,WAAW,EAAEd,KAAD,IAAS;AACjB,YAAMe,UAAU,GAAGf,KAAK,CAACN,MAAN,CAAasB,IAAhC;AACAhB,MAAAA,KAAK,CAACP,aAAN,GAAsBO,KAAK,CAACR,KAAN,CAAYE,MAAZ,CAAmBqB,UAAnB,CAAtB;AACH,KApBI;AAqBLE,IAAAA,SAAS,EAAC,CAACjB,KAAD,EAAOC,MAAP,KAAgB;AACtB,YAAMiB,aAAa,GAAGjB,MAAM,CAACI,OAA7B;AACAL,MAAAA,KAAK,CAACN,MAAN,GAAeJ,UAAU,CAAC4B,aAAD,CAAzB;AACH;AAxBI;AAHyB,CAAD,CAA9B;AA+BP,OAAO,MAAM;AAACnB,EAAAA,OAAD;AAAUS,EAAAA,UAAV;AAAsBG,EAAAA,eAAtB;AAAsCG,EAAAA,WAAtC;AAAkDG,EAAAA;AAAlD,IAA+DrB,UAAU,CAACuB,OAAhF;AACP,eAAevB,UAAU,CAACwB,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { TaskFilter } from \"../Constants/Constants\";\r\n\r\nconst initialState = {tasks:[],\r\n                    filteredTasks:[],\r\n                filter:TaskFilter.All};\r\n\r\nexport const tasksSlice = createSlice({\r\n    name:'tasks',\r\n    initialState,\r\n    reducers:{\r\n        addTask:(state,action)=>{\r\n            if(state.tasks.some(initTask=> initTask.title === action.payload.title)){\r\n                alert('Такое задание уже существует');\r\n            }\r\n            else{\r\n                state.tasks.push(action.payload);\r\n            }\r\n        },\r\n        removeTask:(state,action)=>{\r\n            const taskId = action.payload;\r\n            state.tasks = state.tasks.filter(initTask=> initTask.id !== taskId);\r\n        },\r\n        changeDoneState:(state,action)=>{\r\n            const taskId = action.payload;\r\n            state.tasks = state.tasks.map(initTask => initTask.id === taskId ? {...initTask,done:!initTask.done}:initTask );\r\n        },\r\n        applyFilter:(state)=>{\r\n            const filterfunc = state.filter.func;\r\n            state.filteredTasks = state.tasks.filter(filterfunc); \r\n        },\r\n        setFilter:(state,action)=>{\r\n            const newFilterName = action.payload;\r\n            state.filter = TaskFilter[newFilterName];\r\n        }\r\n    }\r\n});\r\n\r\nexport const {addTask, removeTask, changeDoneState,applyFilter,setFilter} = tasksSlice.actions;\r\nexport default tasksSlice.reducer;"]},"metadata":{},"sourceType":"module"}