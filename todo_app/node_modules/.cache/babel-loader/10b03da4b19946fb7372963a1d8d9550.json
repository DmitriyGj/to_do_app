{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { TaskFilter, TaskFilterOptions } from \"../Constants/Constants\";\nconst initialState = {\n  tasks: [],\n  taskFilter: TaskFilter.All,\n  TaskFilterOptions: TaskFilterOptions,\n  failure: null\n};\nexport const tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    addTask: (state, action) => {\n      if (state.tasks.some(initTask => initTask.title === action.payload.title)) {\n        newState.failure = 'Такое задание уже существует';\n      }\n\n      state.tasks.push(action.payload);\n    },\n    removeTask: (state, action) => {\n      const taskId = action.payload;\n      state.tasks = state.tasks.filter(initTask => initTask.id !== taskId);\n    },\n    changeDoneState: (state, action) => {\n      const taskId = action.payload;\n      state.tasks = state.tasks.map(initTask => initTask.id === taskId ? { ...initTask,\n        done: !initTask.done\n      } : initTask);\n    },\n    setFilter: (state, action) => {\n      state.taskFilter = TaskFilter[action.payload];\n    }\n  }\n});\nexport const {\n  addTask,\n  removeTask,\n  changeDoneState,\n  applyFilter,\n  setFilter\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/redux/tasks.js"],"names":["createSlice","TaskFilter","TaskFilterOptions","initialState","tasks","taskFilter","All","failure","tasksSlice","name","reducers","addTask","state","action","some","initTask","title","payload","newState","push","removeTask","taskId","filter","id","changeDoneState","map","done","setFilter","applyFilter","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,wBAA9C;AAEA,MAAMC,YAAY,GAAG;AAACC,EAAAA,KAAK,EAAC,EAAP;AACLC,EAAAA,UAAU,EAACJ,UAAU,CAACK,GADjB;AAELJ,EAAAA,iBAAiB,EAACA,iBAFb;AAGLK,EAAAA,OAAO,EAAC;AAHH,CAArB;AAMA,OAAO,MAAMC,UAAU,GAAGR,WAAW,CAAC;AAClCS,EAAAA,IAAI,EAAC,OAD6B;AAElCN,EAAAA,YAFkC;AAGlCO,EAAAA,QAAQ,EAAC;AACLC,IAAAA,OAAO,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAEpB,UAAGD,KAAK,CAACR,KAAN,CAAYU,IAAZ,CAAiBC,QAAQ,IAAGA,QAAQ,CAACC,KAAT,KAAmBH,MAAM,CAACI,OAAP,CAAeD,KAA9D,CAAH,EAAwE;AACpEE,QAAAA,QAAQ,CAACX,OAAT,GAAmB,8BAAnB;AACH;;AACDK,MAAAA,KAAK,CAACR,KAAN,CAAYe,IAAZ,CAAiBN,MAAM,CAACI,OAAxB;AACH,KAPI;AAQLG,IAAAA,UAAU,EAAC,CAACR,KAAD,EAAOC,MAAP,KAAgB;AACvB,YAAMQ,MAAM,GAAGR,MAAM,CAACI,OAAtB;AACAL,MAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACR,KAAN,CAAYkB,MAAZ,CAAmBP,QAAQ,IAAGA,QAAQ,CAACQ,EAAT,KAAgBF,MAA9C,CAAd;AACH,KAXI;AAYLG,IAAAA,eAAe,EAAC,CAACZ,KAAD,EAAOC,MAAP,KAAgB;AAC5B,YAAMQ,MAAM,GAAGR,MAAM,CAACI,OAAtB;AACAL,MAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACR,KAAN,CAAYqB,GAAZ,CAAgBV,QAAQ,IAAIA,QAAQ,CAACQ,EAAT,KAAgBF,MAAhB,GAAyB,EAAC,GAAGN,QAAJ;AAAaW,QAAAA,IAAI,EAAC,CAACX,QAAQ,CAACW;AAA5B,OAAzB,GAA2DX,QAAvF,CAAd;AACH,KAfI;AAgBLY,IAAAA,SAAS,EAAC,CAACf,KAAD,EAAOC,MAAP,KAAgB;AACtBD,MAAAA,KAAK,CAACP,UAAN,GAAmBJ,UAAU,CAACY,MAAM,CAACI,OAAR,CAA7B;AACH;AAlBI;AAHyB,CAAD,CAA9B;AA2BP,OAAO,MAAM;AAACN,EAAAA,OAAD;AAAUS,EAAAA,UAAV;AAAsBI,EAAAA,eAAtB;AAAsCI,EAAAA,WAAtC;AAAkDD,EAAAA;AAAlD,IAA+DnB,UAAU,CAACqB,OAAhF;AACP,eAAerB,UAAU,CAACsB,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { TaskFilter, TaskFilterOptions } from \"../Constants/Constants\";\r\n\r\nconst initialState = {tasks:[],\r\n                taskFilter:TaskFilter.All,\r\n                TaskFilterOptions:TaskFilterOptions,\r\n                failure:null\r\n            };\r\n\r\nexport const tasksSlice = createSlice({\r\n    name:'tasks',\r\n    initialState,\r\n    reducers:{\r\n        addTask:(state,action)=>{\r\n\r\n            if(state.tasks.some(initTask=> initTask.title === action.payload.title)){\r\n                newState.failure = 'Такое задание уже существует';\r\n            }\r\n            state.tasks.push(action.payload);\r\n        },\r\n        removeTask:(state,action)=>{\r\n            const taskId = action.payload;\r\n            state.tasks = state.tasks.filter(initTask=> initTask.id !== taskId);\r\n        },\r\n        changeDoneState:(state,action)=>{\r\n            const taskId = action.payload;\r\n            state.tasks = state.tasks.map(initTask => initTask.id === taskId ? {...initTask,done:!initTask.done}:initTask );\r\n        },\r\n        setFilter:(state,action)=>{\r\n            state.taskFilter = TaskFilter[action.payload];\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nexport const {addTask, removeTask, changeDoneState,applyFilter,setFilter} = tasksSlice.actions;\r\nexport default tasksSlice.reducer;"]},"metadata":{},"sourceType":"module"}