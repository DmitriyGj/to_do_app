{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { TaskHolder } from './Components/TaskHolder/TaskHolder';\nimport { ThemeContext, theme } from './contexts/ThemeContext';\nimport { useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App(props) {\n  _s();\n\n  const [theme, setTheme] = useState(theme.usual);\n\n  const toggleThemeHandler = () => {\n    setTheme(theme === theme.usual ? theme.dark : theme.usual);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: theme,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${theme}ThemeBtn ThemeBtn`,\n        onClick: toggleThemeHandler,\n        children: theme === theme.usual ? 'Темная тема' : 'Светлая тема'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TaskHolder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XFrTxO36d15H5DT8IxGMtbbkGfc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/App.js"],"names":["TaskHolder","ThemeContext","theme","useState","useContext","App","props","setTheme","usual","toggleThemeHandler","dark"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAAQA,UAAR,QAAyB,oCAAzB;AACA,SAAQC,YAAR,EAAqBC,KAArB,QAAiC,yBAAjC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;;AAEA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAC/B,QAAM,CAACJ,KAAD,EAAOK,QAAP,IAAmBJ,QAAQ,CAACD,KAAK,CAACM,KAAP,CAAjC;;AACA,QAAMC,kBAAkB,GAAG,MAAI;AAC9BF,IAAAA,QAAQ,CAACL,KAAK,KAAKA,KAAK,CAACM,KAAhB,GAAwBN,KAAK,CAACQ,IAA9B,GAAoCR,KAAK,CAACM,KAA3C,CAAR;AAA2D,GAD5D;;AAGD,sBACC,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAIN,KAAhC;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAG,GAAEA,KAAM,mBAA5B;AACE,QAAA,OAAO,EAAEO,kBADX;AAAA,kBAEKP,KAAK,KAAKA,KAAK,CAACM,KAAhB,GAAwB,aAAxB,GAAuC;AAF5C;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AASF;;GAduBH,G;;KAAAA,G","sourcesContent":["import './App.css';\r\nimport {TaskHolder} from './Components/TaskHolder/TaskHolder'\r\nimport {ThemeContext,theme} from './contexts/ThemeContext'\r\nimport { useState, useContext } from 'react';\r\n\r\nexport default function App(props) {\r\n    const [theme,setTheme] = useState(theme.usual);\r\n    const toggleThemeHandler = ()=>{\r\n     setTheme(theme === theme.usual ? theme.dark: theme.usual);}\r\n\r\n   return (\r\n    <ThemeContext.Provider value = {theme}> \r\n      <div className=\"App\">\r\n          <button className={`${theme}ThemeBtn ThemeBtn`} \r\n            onClick={toggleThemeHandler}>\r\n              {theme === theme.usual ? 'Темная тема': 'Светлая тема'}</button>\r\n          <TaskHolder />\r\n      </div>\r\n    </ThemeContext.Provider>)\r\n}"]},"metadata":{},"sourceType":"module"}