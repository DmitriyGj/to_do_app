{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Components\\\\TaskHolder\\\\TaskHolder.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useCallback } from 'react';\nimport './TaskHolder.css';\nimport { TaskController } from './TaskController/TaskController';\nimport { Task } from '../Task/Task';\nimport { addLodaing } from '../../HOCs/LoaderHOC';\nimport { ThemeContext } from '../../contexts/ThemeContext';\nimport { Selector } from '../Selector/Selector';\nimport { TaskFilterOptions, TaskFilter } from '../../Constants/Constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskWithLoading = addLodaing(Task);\n_c = TaskWithLoading;\nexport function TaskHolder(props) {\n  _s();\n\n  const {\n    tasksStore\n  } = props;\n  const theme = useContext(ThemeContext); // const [taskFilterName, setTaskFilter] = useState(TaskFilter.All.name);\n  // const changeDoneTaskHandler = useCallback((taskId) =>\n  //     {setTasks( tasks.map(initTask => initTask.id === taskId ? {...initTask,done:!initTask.done}:initTask ))}\n  //     ,[tasks]);\n  // const changeFilterHandler = (e) =>{\n  //     setTaskFilter(e.target.value);\n  // }\n  // const removeTaskHandler = useCallback((taskId) => \n  //     {setTasks(tasks.filter(displayTask => displayTask.id !== taskId))},\n  //     [tasks])\n  // const addTaskHandler = useCallback((task)=>\n  // {const unique = tasks.every(instTask => instTask.title !== task.title)\n  //     if(!unique){\n  //         alert('Такое задание уже существует')\n  //         return;\n  //     }\n  //     setTasks( [...tasks,task ]);}\n  //     ,[tasks])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `TaskHolder ${theme}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MainInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u044F\\u043C\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TaskController, {\n        addTaskParentHandler: tasksStore.AddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasksStore.tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(TaskWithLoading, { ...task,\n          removeTaskParentHandler: tasksStore.RemoveTask,\n          changeDoneTaskParentHandler: tasksStore.ToogleStatusTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 37\n        }, this)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 49\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 14\n  }, this);\n}\n\n_s(TaskHolder, \"+C1P7ukOg/azcV4AZ819oyezFOE=\");\n\n_c2 = TaskHolder;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskWithLoading\");\n$RefreshReg$(_c2, \"TaskHolder\");","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Components/TaskHolder/TaskHolder.jsx"],"names":["useState","useContext","useCallback","TaskController","Task","addLodaing","ThemeContext","Selector","TaskFilterOptions","TaskFilter","TaskWithLoading","TaskHolder","props","tasksStore","theme","AddTask","tasks","map","task","RemoveTask","ToogleStatusTask","id"],"mappings":";;;AAAA,SAAQA,QAAR,EAAiBC,UAAjB,EAA6BC,WAA7B,QAA+C,OAA/C;AACA,OAAO,kBAAP;AACA,SAAQC,cAAR,QAA6B,iCAA7B;AACA,SAAQC,IAAR,QAAmB,cAAnB;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,8BAA9C;;AAEA,MAAMC,eAAe,GAAGL,UAAU,CAACD,IAAD,CAAlC;KAAMM,e;AAIN,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAAA;;AAC7B,QAAM;AAACC,IAAAA;AAAD,MAAeD,KAArB;AACA,QAAME,KAAK,GAAGb,UAAU,CAACK,YAAD,CAAxB,CAF6B,CAK7B;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAS;AAAK,IAAA,SAAS,EAAG,cAAaQ,KAAM,EAApC;AAAA,4BACG;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEQ,QAAC,cAAD;AAAgB,QAAA,oBAAoB,EAAID,UAAU,CAACE;AAAnD;AAAA;AAAA;AAAA;AAAA,cAFR;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eASG;AAAA,gBACKF,UAAU,CAACG,KAAX,CAAiBC,GAAjB,CAAqBC,IAAI,iBAAE;AAAA,+BACZ,QAAC,eAAD,OAAqBA,IAArB;AACA,UAAA,uBAAuB,EAAIL,UAAU,CAACM,UADtC;AAEA,UAAA,2BAA2B,EAAIN,UAAU,CAACO;AAF1C;AAAA;AAAA;AAAA;AAAA;AADY,SAAWF,IAAI,CAACG,EAAhB;AAAA;AAAA;AAAA;AAAA,cAA3B;AADL;AAAA;AAAA;AAAA;AAAA,YATH;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AAiBH;;GA9CeV,U;;MAAAA,U","sourcesContent":["import {useState,useContext, useCallback} from 'react'\r\nimport './TaskHolder.css'\r\nimport {TaskController} from './TaskController/TaskController';\r\nimport {Task} from '../Task/Task';\r\nimport { addLodaing } from '../../HOCs/LoaderHOC';\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport { Selector } from '../Selector/Selector';\r\nimport { TaskFilterOptions, TaskFilter } from '../../Constants/Constants.js';\r\n\r\nconst TaskWithLoading = addLodaing(Task);\r\n\r\n\r\n\r\nexport function TaskHolder(props){\r\n    const {tasksStore} = props;\r\n    const theme = useContext(ThemeContext);\r\n\r\n\r\n    // const [taskFilterName, setTaskFilter] = useState(TaskFilter.All.name);\r\n    \r\n\r\n    // const changeDoneTaskHandler = useCallback((taskId) =>\r\n    //     {setTasks( tasks.map(initTask => initTask.id === taskId ? {...initTask,done:!initTask.done}:initTask ))}\r\n    //     ,[tasks]);\r\n\r\n    // const changeFilterHandler = (e) =>{\r\n    //     setTaskFilter(e.target.value);\r\n    // }\r\n\r\n    // const removeTaskHandler = useCallback((taskId) => \r\n    //     {setTasks(tasks.filter(displayTask => displayTask.id !== taskId))},\r\n    //     [tasks])\r\n    \r\n    // const addTaskHandler = useCallback((task)=>\r\n    // {const unique = tasks.every(instTask => instTask.title !== task.title)\r\n    //     if(!unique){\r\n    //         alert('Такое задание уже существует')\r\n    //         return;\r\n    //     }\r\n    //     setTasks( [...tasks,task ]);}\r\n    //     ,[tasks])\r\n\r\n    return ( <div className={`TaskHolder ${theme}`}>\r\n                <div className='MainInfo'>\r\n                    <h2>Управление заданиями</h2>\r\n                        <TaskController addTaskParentHandler = {tasksStore.AddTask}/>\r\n                        {/* <Selector title='Показать' \r\n                                        options={TaskFilterOptions}\r\n                                        changeValueParentHandler = {changeFilterHandler}\r\n                                        parentValue ={taskFilterName} /> */}\r\n                </div>\r\n                <ul>\r\n                    {tasksStore.tasks.map(task=><li key = {task.id}>\r\n                                    <TaskWithLoading {...task} \r\n                                    removeTaskParentHandler = {tasksStore.RemoveTask}\r\n                                    changeDoneTaskParentHandler = {tasksStore.ToogleStatusTask}/> \r\n                                </li>)}\r\n                </ul>\r\n            </div>)\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}