{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { TaskFilter, TaskFilterOptions } from \"../Constants/Constants\";\nconst initialState = {\n  tasks: [],\n  taskFilter: TaskFilter.All,\n  TaskFilterOptions: TaskFilterOptions\n};\nexport const tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    addTask: (state, action) => {\n      if (state.tasks.some(initTask => initTask.title === action.payload.title)) {\n        alert('Такое задание уже существует');\n        return state;\n      }\n\n      state.tasks.push(action.payload);\n    },\n    removeTask: (state, action) => {\n      const taskId = action.payload;\n      state.tasks = state.tasks.filter(initTask => initTask.id !== taskId);\n    },\n    changeDoneState: (state, action) => {\n      const taskId = action.payload;\n      state.tasks = state.tasks.map(initTask => initTask.id === taskId ? { ...initTask,\n        done: !initTask.done\n      } : initTask);\n    },\n    setFilter: (state, action) => {\n      state.taskFilter = TaskFilter[action.payload];\n    }\n  }\n});\nexport const {\n  addTask,\n  removeTask,\n  changeDoneState,\n  setFilter\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;\nexport const getTasks = state => state.tasks;","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/redux/tasks.ts"],"names":["createSlice","TaskFilter","TaskFilterOptions","initialState","tasks","taskFilter","All","tasksSlice","name","reducers","addTask","state","action","some","initTask","title","payload","alert","push","removeTask","taskId","filter","id","changeDoneState","map","done","setFilter","actions","reducer","getTasks"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAAuCC,UAAvC,EAAmDC,iBAAnD,QAA4E,wBAA5E;AAUA,MAAMC,YAAyB,GAAG;AAACC,EAAAA,KAAK,EAAC,EAAP;AAClBC,EAAAA,UAAU,EAACJ,UAAU,CAACK,GADJ;AAElBJ,EAAAA,iBAAiB,EAACA;AAFA,CAAlC;AAKA,OAAO,MAAMK,UAAU,GAAGP,WAAW,CAAC;AAClCQ,EAAAA,IAAI,EAAC,OAD6B;AAElCL,EAAAA,YAFkC;AAGlCM,EAAAA,QAAQ,EAAC;AACLC,IAAAA,OAAO,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACpB,UAAGD,KAAK,CAACP,KAAN,CAAYS,IAAZ,CAAiBC,QAAQ,IAAGA,QAAQ,CAACC,KAAT,KAAmBH,MAAM,CAACI,OAAP,CAAeD,KAA9D,CAAH,EAAwE;AACpEE,QAAAA,KAAK,CAAC,8BAAD,CAAL;AACA,eAAON,KAAP;AACH;;AACDA,MAAAA,KAAK,CAACP,KAAN,CAAYc,IAAZ,CAAiBN,MAAM,CAACI,OAAxB;AACH,KAPI;AAQLG,IAAAA,UAAU,EAAC,CAACR,KAAD,EAAOC,MAAP,KAAgB;AACvB,YAAMQ,MAAM,GAAGR,MAAM,CAACI,OAAtB;AACAL,MAAAA,KAAK,CAACP,KAAN,GAAcO,KAAK,CAACP,KAAN,CAAYiB,MAAZ,CAAmBP,QAAQ,IAAGA,QAAQ,CAACQ,EAAT,KAAgBF,MAA9C,CAAd;AACH,KAXI;AAYLG,IAAAA,eAAe,EAAC,CAACZ,KAAD,EAAOC,MAAP,KAAgB;AAC5B,YAAMQ,MAAM,GAAGR,MAAM,CAACI,OAAtB;AACAL,MAAAA,KAAK,CAACP,KAAN,GAAcO,KAAK,CAACP,KAAN,CAAYoB,GAAZ,CAAgBV,QAAQ,IAAIA,QAAQ,CAACQ,EAAT,KAAgBF,MAAhB,GAAyB,EAAC,GAAGN,QAAJ;AAAaW,QAAAA,IAAI,EAAC,CAACX,QAAQ,CAACW;AAA5B,OAAzB,GAA2DX,QAAvF,CAAd;AACH,KAfI;AAgBLY,IAAAA,SAAS,EAAC,CAACf,KAAD,EAAOC,MAAP,KAAgB;AACtBD,MAAAA,KAAK,CAACN,UAAN,GAAmBJ,UAAU,CAACW,MAAM,CAACI,OAAR,CAA7B;AACH;AAlBI;AAHyB,CAAD,CAA9B;AA2BP,OAAO,MAAM;AAACN,EAAAA,OAAD;AAAUS,EAAAA,UAAV;AAAsBI,EAAAA,eAAtB;AAAsCG,EAAAA;AAAtC,IAAmDnB,UAAU,CAACoB,OAApE;AACP,eAAepB,UAAU,CAACqB,OAA1B;AACA,OAAO,MAAMC,QAAQ,GAAIlB,KAAD,IAAmBA,KAAK,CAACP,KAA1C","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { ISelectorOption, ITaskFilter, TaskFilter, TaskFilterOptions } from \"../Constants/Constants\";\r\nimport { Task } from \"../Components/Task/TaskModel\";\r\nimport {RootState} from './store';\r\n\r\ntype initialState ={\r\n    tasks:Task[],\r\n    taskFilter:ITaskFilter,\r\n    TaskFilterOptions:ISelectorOption[]\r\n}\r\n\r\nconst initialState:initialState = {tasks:[],\r\n                taskFilter:TaskFilter.All,\r\n                TaskFilterOptions:TaskFilterOptions,\r\n            };\r\n\r\nexport const tasksSlice = createSlice({\r\n    name:'tasks',\r\n    initialState,\r\n    reducers:{\r\n        addTask:(state,action)=>{\r\n            if(state.tasks.some(initTask=> initTask.title === action.payload.title)){\r\n                alert('Такое задание уже существует');\r\n                return state;\r\n            }\r\n            state.tasks.push(action.payload);\r\n        },\r\n        removeTask:(state,action)=>{\r\n            const taskId = action.payload;\r\n            state.tasks = state.tasks.filter(initTask=> initTask.id !== taskId);\r\n        },\r\n        changeDoneState:(state,action)=>{\r\n            const taskId = action.payload;\r\n            state.tasks = state.tasks.map(initTask => initTask.id === taskId ? {...initTask,done:!initTask.done}:initTask );\r\n        },\r\n        setFilter:(state,action)=>{\r\n            state.taskFilter = TaskFilter[action.payload];\r\n        },\r\n    }\r\n});\r\n\r\n\r\n\r\nexport const {addTask, removeTask, changeDoneState,setFilter} = tasksSlice.actions;\r\nexport default tasksSlice.reducer;\r\nexport const getTasks = (state:RootState)=>state.tasks;"]},"metadata":{},"sourceType":"module"}