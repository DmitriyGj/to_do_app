{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Components\\\\TaskHolder\\\\TaskFilterSelector\\\\TaskFilterSelector.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport uuid from \"react-uuid\";\nimport { ThemeContext } from \"../../../contexts/ThemeContext\";\nimport './TaskFilterSelector.css';\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TaskFilterSelector(props) {\n  _s();\n\n  const options = [{\n    value: task => task,\n    label: 'Все'\n  }, {\n    value: task => task.done === true,\n    label: 'Выполненные'\n  }, {\n    value: task => task.done === false,\n    label: 'Текущие'\n  }];\n  const theme = useContext(ThemeContext);\n  return value => /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [\"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C\", /*#__PURE__*/_jsxDEV(\"select\", {\n      className: theme + 'FilterSelector',\n      value: props.parentFilterValue,\n      onChange: props.parentChangeFilterHandler,\n      children: options.map(filter => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: filter.value.toString(),\n        label: filter.label\n      }, uuid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 44\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 25\n  }, this);\n}\n\n_s(TaskFilterSelector, \"+C1P7ukOg/azcV4AZ819oyezFOE=\");\n\n_c = TaskFilterSelector;\nTaskFilterSelector.propTypes = {\n  parentFilterValue: PropTypes.string,\n  parentChangeFilterHandler: PropTypes.func\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskFilterSelector\");","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Components/TaskHolder/TaskFilterSelector/TaskFilterSelector.jsx"],"names":["useContext","uuid","ThemeContext","PropTypes","TaskFilterSelector","props","options","value","task","label","done","theme","parentFilterValue","parentChangeFilterHandler","map","filter","toString","propTypes","string","func"],"mappings":";;;AAAA,SAAQA,UAAR,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,OAAO,0BAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAkC;AAAA;;AAEjC,QAAMC,OAAO,GAAG,CAAC;AAACC,IAAAA,KAAK,EAAEC,IAAD,IAAQA,IAAf;AAAqBC,IAAAA,KAAK,EAAE;AAA5B,GAAD,EACC;AAACF,IAAAA,KAAK,EAAEC,IAAD,IAASA,IAAI,CAACE,IAAL,KAAY,IAA5B;AAAoCD,IAAAA,KAAK,EAAC;AAA1C,GADD,EAEC;AAACF,IAAAA,KAAK,EAAEC,IAAD,IAASA,IAAI,CAACE,IAAL,KAAY,KAA5B;AAAmCD,IAAAA,KAAK,EAAC;AAAzC,GAFD,CAAhB;AAIA,QAAME,KAAK,GAAGX,UAAU,CAACE,YAAD,CAAxB;AAEA,SACQK,KAAK,iBAAG;AAAA,gFACR;AAAQ,MAAA,SAAS,EAAEI,KAAK,GAAC,gBAAzB;AACQ,MAAA,KAAK,EAAEN,KAAK,CAACO,iBADrB;AAEQ,MAAA,QAAQ,EAAEP,KAAK,CAACQ,yBAFxB;AAAA,gBAGKP,OAAO,CAACQ,GAAR,CAAYC,MAAM,iBAAI;AAAuB,QAAA,KAAK,EAAEA,MAAM,CAACR,KAAP,CAAaS,QAAb,EAA9B;AAAuD,QAAA,KAAK,EAAED,MAAM,CAACN;AAArE,SAAcR,IAAI,EAAlB;AAAA;AAAA;AAAA;AAAA,cAAtB;AAHL;AAAA;AAAA;AAAA;AAAA,YADQ;AAAA;AAAA;AAAA;AAAA;AAAA,UADhB;AAQP;;GAhBeG,kB;;KAAAA,kB;AAkBhBA,kBAAkB,CAACa,SAAnB,GAA6B;AACzBL,EAAAA,iBAAiB,EAAET,SAAS,CAACe,MADJ;AAEzBL,EAAAA,yBAAyB,EAAEV,SAAS,CAACgB;AAFZ,CAA7B","sourcesContent":["import {useContext} from \"react\";\r\nimport uuid from \"react-uuid\";\r\nimport { ThemeContext } from \"../../../contexts/ThemeContext\";\r\nimport './TaskFilterSelector.css'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport function TaskFilterSelector(props){\r\n\r\n        const options = [{value:(task)=>task, label: 'Все'},\r\n                         {value:(task)=>(task.done===true),  label:'Выполненные'},\r\n                         {value:(task)=>(task.done===false),label:'Текущие'}];\r\n\r\n        const theme = useContext(ThemeContext);\r\n\r\n        return (\r\n                value=> <label>Показать\r\n                <select className={theme+'FilterSelector'}\r\n                        value={props.parentFilterValue}\r\n                        onChange={props.parentChangeFilterHandler}>\r\n                    {options.map(filter => <option key ={uuid()}  value={filter.value.toString()} label={filter.label}></option>)}\r\n                </select>\r\n            </label>);\r\n}\r\n\r\nTaskFilterSelector.propTypes={\r\n    parentFilterValue: PropTypes.string,\r\n    parentChangeFilterHandler: PropTypes.func\r\n};"]},"metadata":{},"sourceType":"module"}