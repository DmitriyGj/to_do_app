{"ast":null,"code":"var _jsxFileName = \"D:\\\\Repositories\\\\CRTReact\\\\to_do_application\\\\src\\\\Components\\\\TaskHolder\\\\TaskHolder.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useCallback } from 'react';\nimport './TaskHolder.css';\nimport { TaskController } from './TaskController/TaskController';\nimport { Task } from '../Task/Task';\nimport { addLodaing } from '../../HOCs/LoaderHOC';\nimport { ThemeContext } from '../../contexts/ThemeContext';\nimport { Selector } from '../Selector/Selector';\nimport { TaskFilterOptions, TaskFilter } from '../../Constants/Constants.js';\nimport { observer } from 'mobx-react-lite';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskWithLoading = addLodaing(Task);\n_c = TaskWithLoading;\nexport function TaskHolder(props) {\n  _s();\n\n  const theme = useContext(ThemeContext);\n  const [tasks, setTasks] = useState([]);\n  const [taskFilterName, setTaskFilter] = useState(TaskFilter.All.name);\n  const changeDoneTaskHandler = useCallback(taskId => {\n    setTasks(tasks.map(initTask => initTask.id === taskId ? { ...initTask,\n      done: !initTask.done\n    } : initTask));\n  }, [tasks]);\n\n  const changeFilterHandler = e => {\n    setTaskFilter(e.target.value);\n  };\n\n  const removeTaskHandler = useCallback(taskId => {\n    setTasks(tasks.filter(displayTask => displayTask.id !== taskId));\n  }, [tasks]);\n  const addTaskHandler = useCallback(task => {\n    const unique = tasks.every(instTask => instTask.title !== task.title);\n\n    if (!unique) {\n      alert('Такое задание уже существует');\n      return;\n    }\n\n    setTasks([...tasks, task]);\n  }, [tasks]);\n  return observer(_ref => {\n    let {\n      tasks\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `TaskHolder ${theme}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MainInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u044F\\u043C\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TaskController, {\n          addTaskParentHandler: tasks.AddTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Selector, {\n          title: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C\",\n          options: TaskFilterOptions,\n          changeValueParentHandler: changeFilterHandler,\n          parentValue: taskFilterName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [...tasks].filter(TaskFilter[taskFilterName].func).map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(TaskWithLoading, { ...task,\n            removeTaskParentHandler: tasks.RemoveTask,\n            changeDoneTaskParentHandler: ToogleStatusTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 37\n          }, this)\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 32\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 30\n    }, this);\n  });\n}\n\n_s(TaskHolder, \"zjXUaqhv/OnF5wyJAAG98Z06h/Q=\");\n\n_c2 = TaskHolder;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskWithLoading\");\n$RefreshReg$(_c2, \"TaskHolder\");","map":{"version":3,"sources":["D:/Repositories/CRTReact/to_do_application/src/Components/TaskHolder/TaskHolder.jsx"],"names":["useState","useContext","useCallback","TaskController","Task","addLodaing","ThemeContext","Selector","TaskFilterOptions","TaskFilter","observer","TaskWithLoading","TaskHolder","props","theme","tasks","setTasks","taskFilterName","setTaskFilter","All","name","changeDoneTaskHandler","taskId","map","initTask","id","done","changeFilterHandler","e","target","value","removeTaskHandler","filter","displayTask","addTaskHandler","task","unique","every","instTask","title","alert","AddTask","func","RemoveTask","ToogleStatusTask"],"mappings":"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","sourcesContent":["import {useState,useContext, useCallback} from 'react'\r\nimport './TaskHolder.css'\r\nimport {TaskController} from './TaskController/TaskController';\r\nimport {Task} from '../Task/Task';\r\nimport { addLodaing } from '../../HOCs/LoaderHOC';\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport { Selector } from '../Selector/Selector';\r\nimport { TaskFilterOptions, TaskFilter } from '../../Constants/Constants.js';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst TaskWithLoading = addLodaing(Task);\r\n\r\nexport function TaskHolder(props){\r\n\r\n    const theme = useContext(ThemeContext);\r\n\r\n    const [tasks,setTasks] = useState([]);\r\n    const [taskFilterName, setTaskFilter] = useState(TaskFilter.All.name);\r\n    \r\n\r\n    const changeDoneTaskHandler = useCallback((taskId) =>\r\n        {setTasks( tasks.map(initTask => initTask.id === taskId ? {...initTask,done:!initTask.done}:initTask ))}\r\n        ,[tasks]);\r\n\r\n    const changeFilterHandler = (e) =>{\r\n        setTaskFilter(e.target.value);\r\n    }\r\n\r\n    const removeTaskHandler = useCallback((taskId) => \r\n        {setTasks(tasks.filter(displayTask => displayTask.id !== taskId))},\r\n        [tasks])\r\n    \r\n    const addTaskHandler = useCallback((task)=>\r\n    {const unique = tasks.every(instTask => instTask.title !== task.title)\r\n        if(!unique){\r\n            alert('Такое задание уже существует')\r\n            return;\r\n        }\r\n        setTasks( [...tasks,task ]);}\r\n        ,[tasks])\r\n\r\n    return (\r\n        observer(({tasks})=>(<div className={`TaskHolder ${theme}`}>\r\n                <div className='MainInfo'>\r\n                    <h2>Управление заданиями</h2>\r\n                        <TaskController addTaskParentHandler = {tasks.AddTask}/>\r\n                        <Selector title='Показать' \r\n                                        options={TaskFilterOptions}\r\n                                        changeValueParentHandler = {changeFilterHandler}\r\n                                        parentValue ={taskFilterName} />\r\n                </div>\r\n                <ul>\r\n                    {[...tasks].filter(TaskFilter[taskFilterName].func)\r\n                    .map(task=><li key = {task.id}>\r\n                                    <TaskWithLoading {...task} \r\n                                    removeTaskParentHandler = {tasks.RemoveTask}\r\n                                    changeDoneTaskParentHandler = {ToogleStatusTask}/> \r\n                                </li>)}\r\n                </ul>\r\n            </div>))\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}